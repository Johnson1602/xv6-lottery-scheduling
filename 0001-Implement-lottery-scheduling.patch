From 3bbbd6b69cd83a8e465b523564b16675db53f15c Mon Sep 17 00:00:00 2001
From: Weiyi Xu <wx650@nyu.edu>
Date: Sat, 23 Nov 2019 19:29:57 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 69 +++++++++++++++++++++++++++++++++++++++++++--------------------
 proc.h    |  3 ++-
 syscall.c |  4 +++-
 syscall.h |  1 +
 sysproc.c | 17 ++++++++++++++--
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 71 insertions(+), 26 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..94d3d32 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 20;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -58,11 +59,11 @@ found:
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
-  
+
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
   p->tf = (struct trapframe*)sp;
-  
+
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
@@ -83,7 +84,7 @@ userinit(void)
 {
   struct proc *p;
   extern char _binary_initcode_start[], _binary_initcode_size[];
-  
+
   p = allocproc();
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
@@ -111,7 +112,7 @@ int
 growproc(int n)
 {
   uint sz;
-  
+
   sz = proc->sz;
   if(n > 0){
     if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
@@ -158,14 +159,14 @@ fork(void)
   np->cwd = idup(proc->cwd);
 
   safestrcpy(np->name, proc->name, sizeof(proc->name));
- 
+
   pid = np->pid;
 
   // lock to force the compiler to emit the np->state write last.
   acquire(&ptable.lock);
   np->state = RUNNABLE;
   release(&ptable.lock);
-  
+
   return pid;
 }
 
@@ -271,6 +272,10 @@ scheduler(void)
   struct proc *p;
   int foundproc = 1;
 
+  int counter = 0;
+  long winner = 0;
+  long total_tickets = 0;
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -278,25 +283,45 @@ scheduler(void)
     if (!foundproc) hlt();
     foundproc = 0;
 
+    // reset counter and total tickets number for current round
+    counter = 0;
+    total_tickets = 0;
+
+    // calculate total tickets number
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state == RUNNABLE){
+        total_tickets += p->tickets;
+      }
+    }
+
+    // generate a random ticket number winner
+    winner = random_at_most(total_tickets);
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      foundproc = 1;
-      proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-      swtch(&cpu->scheduler, proc->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      proc = 0;
+      counter += p->tickets;
+      if(counter >= winner){
+        // Switch to chosen process.  It is the process's job
+        // to release ptable.lock and then reacquire it
+        // before jumping back to us.
+        foundproc = 1;
+        proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+        swtch(&cpu->scheduler, proc->context);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        proc = 0;
+	break;
+      } else {
+        continue;
+      }
     }
     release(&ptable.lock);
 
@@ -344,13 +369,13 @@ forkret(void)
 
   if (first) {
     // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot 
+    // of a regular process (e.g., they call sleep), and thus cannot
     // be run from main().
     first = 0;
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
-  
+
   // Return to "caller", actually trapret (see allocproc).
 }
 
@@ -455,7 +480,7 @@ procdump(void)
   struct proc *p;
   char *state;
   uint pc[10];
-  
+
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
     if(p->state == UNUSED)
       continue;
diff --git a/proc.h b/proc.h
index 3b9c3ac..155a1df 100644
--- a/proc.h
+++ b/proc.h
@@ -10,7 +10,7 @@ struct cpu {
   volatile uint started;       // Has the CPU started?
   int ncli;                    // Depth of pushcli nesting.
   int intena;                  // Were interrupts enabled before pushcli?
-  
+
   // Cpu-local storage variables; see below
   struct cpu *cpu;
   struct proc *proc;           // The currently-running process.
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // Tracks how many tickets a process has
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..59d04ed 100644
--- a/syscall.c
+++ b/syscall.c
@@ -55,7 +55,7 @@ int
 argptr(int n, char **pp, int size)
 {
   int i;
-  
+
   if(argint(n, &i) < 0)
     return -1;
   if((uint)i >= proc->sz || (uint)i+size > proc->sz)
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..c85a685 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -61,7 +61,7 @@ sys_sleep(void)
 {
   int n;
   uint ticks0;
-  
+
   if(argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
@@ -83,7 +83,7 @@ int
 sys_uptime(void)
 {
   uint xticks;
-  
+
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
@@ -98,3 +98,16 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+// allow a process to specify how many lottery tickets it wants
+int
+sys_settickets(void)
+{
+  int n;
+  if (argint(0, &n) < 0) {
+     return -1;
+  } else {
+     proc->tickets = n;
+  }
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

